// Generated by CoffeeScript 1.4.0

/**
 * @package     CleverStyle Music
 * @category    app
 * @author      Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright   Copyright (c) 2014, Nazar Mokrynskyi
 * @license     MIT License, see license.txt
*/


(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function() {
    var db, genres_list, library_size, music_storage, on_db_ready, request;
    if (!window.indexedDB) {
      alert("Indexed DB is not supported O_o");
      return;
    }
    db = null;
    on_db_ready = [];
    music_storage = navigator.getDeviceStorage('music');
    request = indexedDB.open('music_db', 1);
    request.onsuccess = function() {
      var callback;
      db = request.result;
      while (callback = on_db_ready.shift()) {
        callback();
      }
    };
    request.onerror = function(e) {
      console.error(e);
    };
    request.onupgradeneeded = function() {
      var meta_store, music_store;
      db = request.result;
      if (db.objectStoreNames.contains('music')) {
        db.deleteObjectStore('music');
      }
      music_store = db.createObjectStore('music', {
        keyPath: 'id',
        autoIncrement: true
      });
      music_store.createIndex('name', 'name', {
        unique: true
      });
      meta_store = db.createObjectStore('meta', {
        keyPath: 'id'
      });
      meta_store.createIndex('title', 'title');
      meta_store.createIndex('artist', 'artist');
      meta_store.createIndex('album', 'album');
      meta_store.createIndex('genre', 'genre');
      meta_store.createIndex('year', 'year');
      db.transaction.oncomplete = function() {
        var callback, _results;
        _results = [];
        while (callback = on_db_ready.shift()) {
          _results.push(callback());
        }
        return _results;
      };
    };
    library_size = -1;
    cs.music_library = {
      add: function(name, callback) {
        callback = (callback || function() {}).bind(this);
        return this.onready(function() {
          return db.transaction(['music'], 'readwrite').objectStore('music').put({
            name: name
          }).onsuccess = callback;
        });
      },
      parse_metadata: function(name, callback) {
        callback = (callback || function() {}).bind(this);
        return db.transaction(['music']).objectStore('music').index('name').get(name).onsuccess = function() {
          var data;
          if (this.result) {
            data = this.result;
            return music_storage.get(data.name).onsuccess = function() {
              var asset;
              if (this.result) {
                asset = AV.Asset.fromURL(window.URL.createObjectURL(this.result));
                return asset.get('metadata', function(metadata) {
                  var genre;
                  if (!metadata) {
                    return;
                  }
                  genre = metadata.genre || '';
                  genre = new String(genre).replace(/^\(?([0-9]+)\)?$/, function(match, genre_index) {
                    return genres_list[parseInt(genre_index)];
                  });
                  return db.transaction(['meta'], 'readwrite').objectStore('meta').put({
                    id: data.id,
                    title: metadata.title || '',
                    artist: metadata.artist || '',
                    album: metadata.album || '',
                    genre: genre || '',
                    year: metadata.year || metadata.recordingTime || ''
                  }).onsuccess = function() {
                    return callback();
                  };
                });
              }
            };
          }
        };
      },
      get: function(id, callback) {
        callback = (callback || function() {}).bind(this);
        return this.onready(function() {
          return db.transaction(['music']).objectStore('music').get(id).onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              return callback(result);
            }
          };
        });
      },
      get_meta: function(id, callback) {
        callback = (callback || function() {}).bind(this);
        return this.onready(function() {
          return db.transaction(['meta']).objectStore('meta').get(id).onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              return callback(result);
            }
          };
        });
      },
      get_all: function(callback, filter) {
        callback = (callback || function() {}).bind(this);
        filter = filter || function() {
          return true;
        };
        return this.onready(function() {
          var all;
          all = [];
          return db.transaction(['music']).objectStore('music').openCursor().onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              if (filter(result.value)) {
                all.push(result.value);
              }
              return result["continue"]();
            } else {
              return callback(all);
            }
          };
        });
      },
      del: function(id) {
        return this.onready(function() {
          return db.transaction(['music'], 'readwrite').objectStore('music')["delete"](id).onsuccess = function() {
            return db.transaction(['meta'], 'readwrite').objectStore('meta')["delete"](id);
          };
        });
      },
      size: function(callback, filter) {
        callback = (callback || function() {}).bind(this);
        filter = filter || function() {
          return true;
        };
        return this.onready(function() {
          var calculated_size;
          if (library_size >= 0 && !filter) {
            callback(library_size);
          }
          calculated_size = 0;
          return db.transaction(['music']).objectStore('music').openCursor().onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              if (!filter || filter(result.value)) {
                ++calculated_size;
              }
              return result["continue"]();
            } else {
              if (!filter) {
                library_size = calculated_size;
              }
              return callback(calculated_size);
            }
          };
        });
      },
      rescan: function(done_callback) {
        done_callback = (done_callback || function() {}).bind(this);
        return this.onready(function() {
          var new_files, remove_old_files,
            _this = this;
          new_files = [];
          remove_old_files = function() {
            return _this.get_all(function(all) {
              all.forEach(function(file) {
                var _ref;
                if (_ref = file.name, __indexOf.call(new_files, _ref) < 0) {
                  _this.del(file.id);
                }
              });
              return done_callback();
            });
          };
          return (function() {
            var cursor;
            music_storage = navigator.getDeviceStorage('music');
            cursor = music_storage.enumerate();
            cursor.onsuccess = function() {
              var file;
              if (cursor.result) {
                file = cursor.result;
                return db.transaction(['music']).objectStore('music').index('name').get(file.name).onsuccess = function(e) {
                  if (!e.target.result) {
                    return _this.add(file.name, function() {
                      return this.parse_metadata(file.name, function() {
                        new_files.push(file.name);
                        return cursor["continue"]();
                      });
                    });
                  } else {
                    new_files.push(file.name);
                    return cursor["continue"]();
                  }
                };
              } else {
                return remove_old_files();
              }
            };
            return cursor.onerror = function() {
              return console.error(this.error.name);
            };
          })();
        });
      },
      onready: function(callback) {
        callback = (callback || function() {}).bind(this);
        if (db) {
          callback();
        } else {
          on_db_ready.push(callback);
        }
      }
    };
    return genres_list = ['Blues', 'Classic Rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip-Hop', 'Jazz', 'Metal', 'New Age', 'Oldies', 'Other', 'Pop', 'R&B', 'Rap', 'Reggae', 'Rock', 'Techno', 'Industrial', 'Alternative', 'Ska', 'Death Metal', 'Pranks', 'Soundtrack', 'Euro-Techno', 'Ambient', 'Trip-Hop', 'Vocal', 'Jazz+Funk', 'Fusion', 'Trance', 'Classical', 'Instrumental', 'Acid', 'House', 'Game', 'Sound Clip', 'Gospel', 'Noise', 'AlternRock', 'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental Pop', 'Instrumental Rock', 'Ethnic', 'Gothic', 'Darkwave', 'Techno-Industrial', 'Electronic', 'Pop-Folk', 'Eurodance', 'Dream', 'Southern Rock', 'Comedy', 'Cult', 'Gangsta Rap', 'Top 40', 'Christian Rap', 'Pop / Funk', 'Jungle', 'Native American', 'Cabaret', 'New Wave', 'Psychedelic', 'Rave', 'Showtunes', 'Trailer', 'Lo-Fi', 'Tribal', 'Acid Punk', 'Acid Jazz', 'Polka', 'Retro', 'Musical', 'Rock & Roll', 'Hard Rock', 'Folk', 'Folk-Rock', 'National Folk', 'Swing', 'Fast Fusion', 'Bebob', 'Latin', 'Revival', 'Celtic', 'Bluegrass', 'Avantgarde', 'Gothic Rock', 'Progressive Rock', 'Psychedelic Rock', 'Symphonic Rock', 'Slow Rock', 'Big Band', 'Chorus', 'Easy Listening', 'Acoustic', 'Humour', 'Speech', 'Chanson', 'Opera', 'Chamber Music', 'Sonata', 'Symphony', 'Booty Bass', 'Primus', 'Porn Groove', 'Satire', 'Slow Jam', 'Club', 'Tango', 'Samba', 'Folklore', 'Ballad', 'Power Ballad', 'Rhythmic Soul', 'Freestyle', 'Duet', 'Punk Rock', 'Drum Solo', 'A Cappella', 'Euro-House', 'Dance Hall', 'Goa', 'Drum & Bass', 'Club-House', 'Hardcore', 'Terror', 'Indie', 'BritPop', 'Negerpunk', 'Polsk Punk', 'Beat', 'Christian Gangsta Rap', 'Heavy Metal', 'Black Metal', 'Crossover', 'Contemporary Christian', 'Christian Rock', 'Merengue', 'Salsa', 'Thrash Metal', 'Anime', 'JPop', 'Synthpop', 'Abstract', 'Art Rock', 'Baroque', 'Bhangra', 'Big Beat', 'Breakbeat', 'Chillout', 'Downtempo', 'Dub', 'EBM', 'Eclectic', 'Electro', 'Electroclash', 'Emo', 'Experimental', 'Garage', 'Global', 'IDM', 'Illbient', 'Industro-Goth', 'Jam Band', 'Krautrock', 'Leftfield', 'Lounge', 'Math Rock', 'New Romantic', 'Nu-Breakz', 'Post-Punk', 'Post-Rock', 'Psytrance', 'Shoegaze', 'Space Rock', 'Trop Rock', 'World Music', 'Neoclassical', 'Audiobook', 'Audio Theatre', 'Neue Deutsche Welle', 'Podcast', 'Indie Rock', 'G-Funk', 'Dubstep', 'Garage Rock', 'Psybient'];
  })();

}).call(this);
