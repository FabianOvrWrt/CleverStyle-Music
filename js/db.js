// Generated by CoffeeScript 1.4.0

/**
 * @package     CleverStyle Music
 * @category    app
 * @author      Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright   Copyright (c) 2014, Nazar Mokrynskyi
 * @license     MIT License, see license.txt
*/


(function() {

  if (!window.cs) {
    window.cs = {};
  }

  (function() {
    var db, library_size, on_db_ready, request;
    if (!window.indexedDB) {
      alert("Indexed DB is not supported O_o");
      return;
    }
    db = null;
    on_db_ready = [];
    request = indexedDB.open('music_db', 1);
    request.onsuccess = function() {
      var callback;
      db = request.result;
      while (callback = on_db_ready.shift()) {
        callback();
      }
    };
    request.onerror = function(e) {
      console.error(e);
    };
    request.onupgradeneeded = function() {
      var store;
      db = request.result;
      if (db.objectStoreNames.contains('music')) {
        db.deleteObjectStore('music');
      }
      store = db.createObjectStore('music', {
        keyPath: 'id',
        autoIncrement: true
      });
      store.createIndex('name', 'name', {
        unique: true
      });
      db.transaction.oncomplete = function() {
        var callback, _results;
        _results = [];
        while (callback = on_db_ready.shift()) {
          _results.push(callback());
        }
        return _results;
      };
    };
    library_size = -1;
    return cs.music_library = {
      add: function(name) {
        return this.onready(function() {
          var store, transaction;
          transaction = db.transaction(['music'], 'readwrite');
          store = transaction.objectStore('music');
          try {
            return store.add({
              name: name
            });
          } catch (e) {

          }
        });
      },
      get: function(id, callback) {
        return this.onready(function() {
          return db.transaction(['music']).objectStore('music').get(id).onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              return callback(result);
            }
          };
        });
      },
      get_all: function(callback, filter) {
        return this.onready(function() {
          var all;
          all = [];
          return db.transaction(['music']).objectStore('music').openCursor().onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              if (!filter || filter(result.value)) {
                all.push(result.value);
              }
              return result["continue"]();
            } else {
              return callback(all);
            }
          };
        });
      },
      get_next_id_to_play: function(callback) {
        var current_playlist, next_item;
        current_playlist = localStorage.getItem('current_playlist');
        if (current_playlist) {
          current_playlist = JSON.parse(current_playlist);
          next_item = current_playlist.pop();
          localStorage.setItem('current_playlist', JSON.stringify(current_playlist));
          return callback(next_item);
        } else {
          return this.get_all(function(all) {
            current_playlist = [];
            all.forEach(function(value) {
              return current_playlist.push(value.id);
            });
            current_playlist.shuffle();
            next_item = current_playlist.pop();
            if (current_playlist.length) {
              localStorage.setItem('current_playlist', JSON.stringify(current_playlist));
            } else {
              this.clean_playlist();
            }
            return callback(next_item);
          });
        }
      },
      clean_playlist: function() {
        return localStorage.removeItem('current_playlist');
      },
      size: function(callback, filter) {
        return this.onready(function() {
          var calculated_size;
          if (library_size >= 0 && !filter) {
            callback(library_size);
          }
          calculated_size = 0;
          return db.transaction(['music']).objectStore('music').openCursor().onsuccess = function() {
            var result;
            result = this.result;
            if (result) {
              if (!filter || filter(result.value)) {
                ++calculated_size;
              }
              return result["continue"]();
            } else {
              if (!filter) {
                library_size = calculated_size;
              }
              return callback(calculated_size);
            }
          };
        });
      },
      onready: function(callback) {
        if (db) {
          callback();
        } else {
          on_db_ready.push(callback);
        }
      }
    };
  })();

}).call(this);
